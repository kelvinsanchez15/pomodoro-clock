{"version":3,"sources":["sounds/Electronic_Beeping_Alarm_Clock.mp3","components/Break.js","components/Session.js","components/Timer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Break","breakTime","handleBreakDecrementClick","handleBreakIncrementClick","id","className","onClick","Session","sessionTime","handleSessionDecrementClick","handleSessionIncrementClick","Timer","timeLeft","isRunning","status","minutes","Math","floor","seconds","style","borderColor","App","useState","setBreakTime","setSessionTime","setTimeLeft","setIsRunning","setStatus","playAudio","audio","document","getElementById","currentTime","play","useEffect","timer","setInterval","clearInterval","pause","resetAudio","src","alarmBeep","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d1937341.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Electronic_Beeping_Alarm_Clock.538380e2.mp3\";","import React from \"react\";\r\nimport {\r\n  AiOutlinePlusCircle,\r\n  AiOutlineMinusCircle,\r\n  AiOutlineCoffee,\r\n} from \"react-icons/ai\";\r\n\r\nexport default function Break({\r\n  breakTime,\r\n  handleBreakDecrementClick,\r\n  handleBreakIncrementClick,\r\n}) {\r\n  return (\r\n    <div id=\"break-label\" className=\"time-setter\">\r\n      <div\r\n        id=\"break-decrement\"\r\n        className=\"button\"\r\n        onClick={handleBreakDecrementClick}\r\n      >\r\n        <AiOutlineMinusCircle />\r\n      </div>\r\n      <div>\r\n        <div className=\"time-setter-icon\">\r\n          <AiOutlineCoffee />\r\n        </div>\r\n        <div id=\"break-length\">{breakTime / 60}</div>\r\n      </div>\r\n      <div\r\n        id=\"break-increment\"\r\n        className=\"button\"\r\n        onClick={handleBreakIncrementClick}\r\n      >\r\n        <AiOutlinePlusCircle />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { AiOutlinePlusCircle, AiOutlineMinusCircle } from \"react-icons/ai\";\r\nimport { BsBriefcase } from \"react-icons/bs\";\r\n\r\nexport default function Session({\r\n  sessionTime,\r\n  handleSessionDecrementClick,\r\n  handleSessionIncrementClick,\r\n}) {\r\n  return (\r\n    <div id=\"session-label\" className=\"time-setter\">\r\n      <div\r\n        id=\"session-decrement\"\r\n        className=\"button\"\r\n        onClick={handleSessionDecrementClick}\r\n      >\r\n        <AiOutlineMinusCircle />\r\n      </div>\r\n      <div>\r\n        <div className=\"time-setter-icon\">\r\n          <BsBriefcase />\r\n        </div>\r\n        <div id=\"session-length\">{sessionTime / 60}</div>\r\n      </div>\r\n      <div\r\n        id=\"session-increment\"\r\n        className=\"button\"\r\n        onClick={handleSessionIncrementClick}\r\n      >\r\n        <AiOutlinePlusCircle />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Timer({ timeLeft, isRunning, status }) {\r\n  let minutes = Math.floor(timeLeft / 60);\r\n  let seconds = timeLeft % 60;\r\n\r\n  return (\r\n    <div\r\n      className=\"timer-wrapper\"\r\n      style={\r\n        isRunning\r\n          ? status\r\n            ? { borderColor: \"#f2c700\" }\r\n            : { borderColor: \"#8bcc4a\" }\r\n          : {}\r\n      }\r\n    >\r\n      <div id=\"timer-label\">\r\n        {isRunning ? (status ? \"FOCUS\" : \"BREAK\") : \"POMODORO CLOCK\"}\r\n      </div>\r\n      <div id=\"time-left\">\r\n        {minutes < 10 ? \"0\" + minutes : minutes}:\r\n        {seconds < 10 ? \"0\" + seconds : seconds}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n// Components imports:\nimport Break from \"./components/Break\";\nimport Session from \"./components/Session\";\nimport Timer from \"./components/Timer\";\n// Audio import:\nimport alarmBeep from \"./sounds/Electronic_Beeping_Alarm_Clock.mp3\";\n// Icons imports:\nimport {\n  AiOutlinePlayCircle,\n  AiOutlinePauseCircle,\n  AiOutlineReload,\n} from \"react-icons/ai\";\n\nfunction App() {\n  const [breakTime, setBreakTime] = useState(300); // 300/60 = 5 minutes\n  const [sessionTime, setSessionTime] = useState(1500); // 1500/60 = 25 minutes\n  const [timeLeft, setTimeLeft] = useState(sessionTime);\n  const [isRunning, setIsRunning] = useState(false);\n  const [status, setStatus] = useState(true);\n\n  const playAudio = () => {\n    const audio = document.getElementById(\"beep\");\n    audio.currentTime = 0;\n    audio.play();\n  };\n\n  const resetAudio = () => {\n    const audio = document.getElementById(\"beep\");\n    audio.pause();\n    audio.currentTime = 0;\n  };\n\n  useEffect(() => {\n    setTimeLeft(sessionTime);\n  }, [sessionTime]);\n\n  useEffect(() => {\n    if (isRunning && timeLeft > 0) {\n      const timer = setInterval(() => setTimeLeft(timeLeft - 1), 1000);\n      return () => clearInterval(timer);\n    } else if (isRunning && timeLeft === 0) {\n      setStatus(!status);\n      if (status) {\n        setTimeLeft(breakTime);\n        playAudio();\n      } else {\n        setTimeLeft(sessionTime);\n        playAudio();\n      }\n    }\n  }, [isRunning, timeLeft, breakTime, sessionTime, status]);\n\n  // Buttons handlers\n  const handleStartStopClick = () => {\n    setIsRunning(!isRunning);\n  };\n\n  const handleResetClick = () => {\n    setIsRunning(false);\n    setStatus(true);\n    setBreakTime(300);\n    setSessionTime(1500);\n    setTimeLeft(sessionTime);\n    resetAudio();\n  };\n\n  const handleBreakDecrementClick = () => {\n    if (isRunning || breakTime <= 60) return;\n    setBreakTime(breakTime - 60);\n  };\n\n  const handleBreakIncrementClick = () => {\n    if (isRunning || breakTime >= 3600) return;\n    setBreakTime(breakTime + 60);\n  };\n\n  const handleSessionDecrementClick = () => {\n    if (isRunning || sessionTime <= 60) return;\n    setSessionTime(sessionTime - 60);\n  };\n\n  const handleSessionIncrementClick = () => {\n    if (isRunning || sessionTime >= 3600) return;\n    setSessionTime(sessionTime + 60);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"app-container\">\n        <Timer timeLeft={timeLeft} isRunning={isRunning} status={status} />\n        <div className=\"time-controls-wrapper\">\n          <div\n            id=\"start_stop\"\n            className=\"button\"\n            onClick={handleStartStopClick}\n          >\n            {isRunning ? <AiOutlinePauseCircle /> : <AiOutlinePlayCircle />}\n          </div>\n          <div id=\"reset\" className=\"button\" onClick={handleResetClick}>\n            <AiOutlineReload />\n          </div>\n        </div>\n        <div className=\"time-setters-wrapper\">\n          <Session\n            sessionTime={sessionTime}\n            handleSessionDecrementClick={handleSessionDecrementClick}\n            handleSessionIncrementClick={handleSessionIncrementClick}\n          />\n          <Break\n            breakTime={breakTime}\n            handleBreakDecrementClick={handleBreakDecrementClick}\n            handleBreakIncrementClick={handleBreakIncrementClick}\n          />\n        </div>\n        <audio id=\"beep\" src={alarmBeep}></audio>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}